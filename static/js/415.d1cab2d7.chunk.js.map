{"version":3,"file":"static/js/415.d1cab2d7.chunk.js","mappings":"kSAEaA,EAAWC,EAAAA,GAAAA,GAAH,wkBAkCRC,EAAWD,EAAAA,GAAAA,GAAH,wDAKRE,EAAaF,EAAAA,GAAAA,EAAH,+CAIVG,EAAQH,EAAAA,GAAAA,IAAH,gE,SCDlB,EAxCiB,SAAC,GAAmB,IAAjBI,EAAgB,EAAhBA,UAClB,GAAKA,EAIL,OACE,gCACwB,IAArBA,EAAUC,SACT,uBAAG,6EAMJD,EAAUC,OAAS,IAClB,SAACN,EAAD,UACGK,EAAUE,KACT,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,cAAeC,EAApC,EAAoCA,KAAMC,EAA1C,EAA0CA,UAA1C,OACE,UAACV,EAAD,WACGO,GACC,SAACL,EAAD,CACES,IAAKH,EACLI,IAAG,yCAAoCL,MAGzC,SAACL,EAAD,CAAOU,IAAKC,EAAgBF,IAAI,mBAElC,4BACE,wBAAKF,KACL,UAACR,EAAD,WAAY,cAAYS,UAXbJ,EADjB,QAqBX,ECOD,EA1Ca,WAEX,OAAkCQ,EAAAA,EAAAA,UAAS,MAA3C,eAAOX,EAAP,KAAkBY,EAAlB,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAA8BH,EAAAA,EAAAA,WAAS,GAAvC,eAAOI,EAAP,KAAgBC,EAAhB,KAGQC,GAAYC,EAAAA,EAAAA,MAAZD,QAwBR,OArBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,oGAEdJ,GAAW,GAFG,UAIYK,EAAAA,EAAAA,IAAQJ,GAJpB,OAIRK,EAJQ,OAMdV,EAAaU,GANC,gDAQK,iBAAf,KAAMC,MACRT,EAAS,KAAMU,SATH,yBAYdR,GAAW,GAZG,4EAAH,qDAgBfI,GACD,GAAE,CAACH,KAIF,gCACGF,IAAW,SAACU,EAAA,EAAD,IAEXZ,IAAUE,IAAW,yBAAG,UAAQF,MAEjC,SAAC,EAAD,CAAUb,UAAWA,MAG1B,C,sLC5CK0B,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,WAKP,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,+GAEoBN,EAASO,IAAT,uBAFpB,uBAEKC,EAFL,EAEKA,KAFL,kBAGIA,EAAKC,SAHT,2HASA,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAA2BC,EAAaC,GAAxC,kGAEoBZ,EAASO,IAAT,8BAAoCI,GAAe,CACxEC,OAAAA,IAHC,uBAEKJ,EAFL,EAEKA,KAFL,kBAKIA,EAAKC,SALT,2HAWA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA4BpC,GAA5B,kGAEoBuB,EAASO,IAAT,iBAAuB9B,IAF3C,uBAEK+B,EAFL,EAEKA,KAFL,kBAGIA,GAHJ,2HASA,SAAeb,EAAtB,+CAAO,OAAP,oBAAO,WAAuBlB,GAAvB,kGAEoBuB,EAASO,IAAT,iBAAuB9B,EAAvB,aAFpB,uBAEK+B,EAFL,EAEKA,KAFL,kBAGIA,EAAKM,MAHT,2HASA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA0BtC,GAA1B,kGAEoBuB,EAASO,IAAT,iBAAuB9B,EAAvB,aAFpB,uBAEK+B,EAFL,EAEKA,KAFL,kBAGIA,EAAKC,SAHT,2H","sources":["components/CastComponent/Cast.styled.jsx","components/CastComponent/Cast.jsx","components/pages/CastPage.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n\n  max-height: 500px;\n\n  padding: 10px;\n\n  list-style: none;\n\n  overflow: auto;\n\n  border-left: 1px solid #111111;\n  border-top: 1px solid #111111;\n  border-bottom: 1px solid #111111;\n\n  border-radius: 5px 0 0 5px;\n\n  &::-webkit-scrollbar {\n    background-color: #ffff62;\n\n    border-left: 1px solid #111111;\n    border-right: 1px solid #111111;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background-color: #42aff3;\n\n    border: 1px solid #111111;\n    border-radius: 3px;\n  }\n`;\n\nexport const CastItem = styled.li`\n  display: flex;\n  gap: 10px;\n`;\n\nexport const ItalicText = styled.p`\n  font-style: italic;\n`;\n\nexport const Image = styled.img`\n  width: 200px;\n  border-radius: 5px;\n`;\n","import noImgAvailable from '../../images/no_image_available.jpg';\n\nimport { CastList, CastItem, ItalicText, Image } from './Cast.styled';\n\nconst CastComp = ({ movieCast }) => {\n  if (!movieCast) {\n    return;\n  }\n\n  return (\n    <>\n      {movieCast.length === 0 && (\n        <p>\n          We are sorry, but we don`t have information about the cast of this\n          movie\n        </p>\n      )}\n\n      {movieCast.length > 0 && (\n        <CastList>\n          {movieCast.map(\n            ({ id, profile_path, original_name, name, character }) => (\n              <CastItem key={id}>\n                {profile_path ? (\n                  <Image\n                    alt={original_name}\n                    src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n                  />\n                ) : (\n                  <Image src={noImgAvailable} alt=\"not available\" />\n                )}\n                <div>\n                  <h4>{name}</h4>\n                  <ItalicText>Character: {character}</ItalicText>\n                </div>\n              </CastItem>\n            )\n          )}\n        </CastList>\n      )}\n    </>\n  );\n};\n\nexport default CastComp;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { Loader } from 'components/LoaderComponent/Loader';\nimport { getCast } from 'services/api';\nimport CastComp from 'components/CastComponent/Cast';\n\nconst Cast = () => {\n  //States\n  const [movieCast, setMovieCast] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  // destructuring \"movieId\" from URL parameters\n  const { movieId } = useParams();\n\n  // fetch request on movieId change\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        setLoading(true);\n\n        const fetchedCast = await getCast(movieId);\n\n        setMovieCast(fetchedCast);\n      } catch (error) {\n        if (error.code !== 'ERR_CANCELED') {\n          setError(error.message);\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchCast();\n  }, [movieId]);\n\n  //Render\n  return (\n    <>\n      {loading && <Loader />}\n\n      {error && !loading && <p>Error: {error}</p>}\n\n      <CastComp movieCast={movieCast} />\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\n// Base request params\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'efb2c1c3ed4f12e7da1417e145c2656a',\n    language: 'en-US',\n  },\n});\n\n// fetch functions\nexport async function fetchTrendingMovies() {\n  try {\n    const { data } = await instance.get(`/trending/movie/day`);\n    return data.results;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function searchMovie(queryString, signal) {\n  try {\n    const { data } = await instance.get(`/search/movie?query=${queryString}`, {\n      signal,\n    });\n    return data.results;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getMovieById(id) {\n  try {\n    const { data } = await instance.get(`/movie/${id}`);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getCast(id) {\n  try {\n    const { data } = await instance.get(`/movie/${id}/credits`);\n    return data.cast;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getReviews(id) {\n  try {\n    const { data } = await instance.get(`/movie/${id}/reviews`);\n    return data.results;\n  } catch (error) {\n    throw error;\n  }\n}\n"],"names":["CastList","styled","CastItem","ItalicText","Image","movieCast","length","map","id","profile_path","original_name","name","character","alt","src","noImgAvailable","useState","setMovieCast","error","setError","loading","setLoading","movieId","useParams","useEffect","fetchCast","getCast","fetchedCast","code","message","Loader","instance","axios","baseURL","params","api_key","language","fetchTrendingMovies","get","data","results","searchMovie","queryString","signal","getMovieById","cast","getReviews"],"sourceRoot":""}