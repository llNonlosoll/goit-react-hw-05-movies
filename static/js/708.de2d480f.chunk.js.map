{"version":3,"file":"static/js/708.de2d480f.chunk.js","mappings":"yRAqEA,EA/DwB,SAAC,GAA2B,IAAzBA,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAChC,GAAKD,EAAL,CAIA,IACEE,EAOEF,EAPFE,MACAC,EAMEH,EANFG,aACAC,EAKEJ,EALFI,WACAC,EAIEL,EAJFK,SACAC,EAGEN,EAHFM,OACAC,EAEEP,EAFFO,YACAC,EACER,EADFQ,eAGF,OACE,iCACE,2BACGD,GACC,gBACEE,IAAKD,EACLE,IAAG,yCAAoCH,MAGzC,gBAAKG,IAAKC,EAAgBF,IAAI,mBAGhC,4BACE,0BACGP,EAAM,MAAIC,MAEb,yBAAG,eAAaC,MAChB,uBAAG,cACH,uBAAIC,KACJ,uBAAG,YACH,wBACGC,EAAOM,KAAI,SAAAC,GAAK,OACf,wBAAoBA,EAAMC,MAAjBD,EAAME,GADA,aAMvB,0BACE,2BACE,yBACE,SAAC,KAAD,CAAMC,GAAG,OAAOC,MAAO,CAAEC,KAAMjB,GAA/B,SAA6C,YAI/C,yBACE,SAAC,KAAD,CAAMe,GAAG,UAAUC,MAAO,CAAEC,KAAMjB,GAAlC,SAAgD,oBAMtD,SAAC,EAAAkB,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,IAApB,UACE,SAAC,KAAD,QAtDL,CA0DF,EChBD,EA5CoB,WAAO,IAAD,IACxB,GAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOtB,EAAP,KAAcuB,EAAd,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAA8BH,EAAAA,EAAAA,WAAS,GAAvC,eAAOI,EAAP,KAAgBC,EAAhB,KAEMC,GAAWC,EAAAA,EAAAA,MAETC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,oGAEfN,GAAW,GAFI,UAIYO,EAAAA,EAAAA,IAAaJ,GAJzB,OAITK,EAJS,OAMfZ,EAASY,GANM,gDAQI,iBAAf,KAAMC,MACRX,EAAS,KAAMY,SATF,yBAYfV,GAAW,GAZI,4EAAH,qDAgBhBM,GACD,GAAE,CAACH,IAEJ,IAAM7B,EAAU,oBAAG2B,EAASX,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IAE3C,OACE,4BACE,SAAC,KAAD,CAAMF,GAAIf,EAAV,SAAsB,YAErByB,IAAW,SAACL,EAAA,EAAD,IAEXG,IAAUE,IAAW,yBAAG,UAAQF,MAEjC,SAAC,EAAD,CAAiBxB,MAAOA,EAAOC,WAAYA,MAGhD,C,8JC9CKqC,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,WAKP,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,+GAEoBN,EAASO,IAAT,uBAFpB,uBAEKC,EAFL,EAEKA,KAFL,kBAGIA,EAAKC,SAHT,2HASA,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAA2BC,EAAaC,GAAxC,kGAEoBZ,EAASO,IAAT,8BAAoCI,GAAe,CACxEC,OAAAA,IAHC,uBAEKJ,EAFL,EAEKA,KAFL,kBAKIA,EAAKC,SALT,2HAWA,SAAeb,EAAtB,+CAAO,OAAP,oBAAO,WAA4BnB,GAA5B,kGAEoBuB,EAASO,IAAT,iBAAuB9B,IAF3C,uBAEK+B,EAFL,EAEKA,KAFL,kBAGIA,GAHJ,2HASA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAAuBpC,GAAvB,kGAEoBuB,EAASO,IAAT,iBAAuB9B,EAAvB,aAFpB,uBAEK+B,EAFL,EAEKA,KAFL,kBAGIA,EAAKM,MAHT,2H","sources":["components/SinglePageComponent/SingleMovie.jsx","components/pages/SingleMoviePage.jsx","services/api.js"],"sourcesContent":["import { Suspense } from 'react';\nimport { Link, Outlet } from 'react-router-dom';\n\nimport { Loader } from 'components/LoaderComponent/Loader';\nimport noImgAvailable from '../../images/no_image_available.jpg';\n\nconst SingleMovieComp = ({ movie, backButton }) => {\n  if (!movie) {\n    return;\n  }\n\n  const {\n    title,\n    release_date,\n    popularity,\n    overview,\n    genres,\n    poster_path,\n    original_title,\n  } = movie;\n\n  return (\n    <>\n      <div>\n        {poster_path ? (\n          <img\n            alt={original_title}\n            src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n          />\n        ) : (\n          <img src={noImgAvailable} alt=\"not available\" />\n        )}\n\n        <div>\n          <h1>\n            {title} : {release_date}\n          </h1>\n          <p>User Score: {popularity}</p>\n          <p>Overview</p>\n          <p>{overview}</p>\n          <p>Genres</p>\n          <ul>\n            {genres.map(genre => (\n              <li key={genre.id}>{genre.name}</li>\n            ))}\n          </ul>\n        </div>\n      </div>\n      <div>\n        <ul>\n          <li>\n            <Link to=\"cast\" state={{ from: backButton }}>\n              Cast\n            </Link>\n          </li>\n          <li>\n            <Link to=\"reviews\" state={{ from: backButton }}>\n              Reviews\n            </Link>\n          </li>\n        </ul>\n      </div>\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default SingleMovieComp;\n","import { useState, useEffect } from 'react';\nimport { useLocation, useParams, Link } from 'react-router-dom';\n\nimport { Loader } from 'components/LoaderComponent/Loader';\nimport { getMovieById } from 'services/api';\nimport SingleMovieComp from 'components/SinglePageComponent/SingleMovie';\n\nconst SingleMovie = () => {\n  const [movie, setMovie] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const location = useLocation();\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        setLoading(true);\n\n        const fetchedMovie = await getMovieById(movieId);\n\n        setMovie(fetchedMovie);\n      } catch (error) {\n        if (error.code !== 'ERR_CANCELED') {\n          setError(error.message);\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchMovie();\n  }, [movieId]);\n\n  const backButton = location.state?.from ?? '/';\n\n  return (\n    <div>\n      <Link to={backButton}>Go Back</Link>\n\n      {loading && <Loader />}\n\n      {error && !loading && <p>Error: {error}</p>}\n\n      <SingleMovieComp movie={movie} backButton={backButton} />\n    </div>\n  );\n};\n\nexport default SingleMovie;\n","import axios from 'axios';\n\n// Base request params\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'efb2c1c3ed4f12e7da1417e145c2656a',\n    language: 'en-US',\n  },\n});\n\n// fetch functions\nexport async function fetchTrendingMovies() {\n  try {\n    const { data } = await instance.get(`/trending/movie/day`);\n    return data.results;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function searchMovie(queryString, signal) {\n  try {\n    const { data } = await instance.get(`/search/movie?query=${queryString}`, {\n      signal,\n    });\n    return data.results;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getMovieById(id) {\n  try {\n    const { data } = await instance.get(`/movie/${id}`);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getCast(id) {\n  try {\n    const { data } = await instance.get(`/movie/${id}/credits`);\n    return data.cast;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getReviews(id) {\n  try {\n    const { data } = await instance.get(`/movie/${id}/reviews`);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n"],"names":["movie","backButton","title","release_date","popularity","overview","genres","poster_path","original_title","alt","src","noImgAvailable","map","genre","name","id","to","state","from","Suspense","fallback","Loader","useState","setMovie","error","setError","loading","setLoading","location","useLocation","movieId","useParams","useEffect","fetchMovie","getMovieById","fetchedMovie","code","message","instance","axios","baseURL","params","api_key","language","fetchTrendingMovies","get","data","results","searchMovie","queryString","signal","getCast","cast"],"sourceRoot":""}