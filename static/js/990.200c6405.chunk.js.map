{"version":3,"file":"static/js/990.200c6405.chunk.js","mappings":"2OAwEA,UAhEa,WACX,OAAkCA,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAsBR,IApBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,oGAEdJ,GAAW,GAFG,UAIYK,EAAAA,EAAAA,IAAQJ,GAJpB,OAIRK,EAJQ,OAMdV,EAAaU,GANC,gDAQK,iBAAf,KAAMC,MACRT,EAAS,KAAMU,SATH,yBAYdR,GAAW,GAZG,4EAAH,qDAgBfI,GACD,GAAE,CAACH,IAECN,EAIL,OACE,2BACGI,IAAW,SAAC,IAAD,IAEXF,IAAUE,IAAW,yBAAG,UAAQF,MAIjC,wBACGF,EAAUc,KACT,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,cAAeC,EAApC,EAAoCA,KAAMC,EAA1C,EAA0CA,UAA1C,OACE,2BACE,gBACEC,MAAM,QACNC,IACEL,EAAY,yCACwBA,IAElC,gBAAKK,IAAKC,EAAgBC,IAAI,kBAGlCA,IAAKN,KAEP,uBAAIC,KACJ,yBAAG,cAAYC,OAbRJ,EADX,QAqBT,C,8JCnEKS,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,WAKP,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,+GAEoBN,EAASO,IAAT,uBAFpB,uBAEKC,EAFL,EAEKA,KAFL,kBAGIA,EAAKC,SAHT,2HASA,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAA2BC,EAAaC,GAAxC,kGAEoBZ,EAASO,IAAT,8BAAoCI,GAAe,CACxEC,OAAAA,IAHC,uBAEKJ,EAFL,EAEKA,KAFL,kBAKIA,EAAKC,SALT,2HAWA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA4BtB,GAA5B,kGAEoBS,EAASO,IAAT,iBAAuBhB,IAF3C,uBAEKiB,EAFL,EAEKA,KAFL,kBAGIA,GAHJ,2HASA,SAAetB,EAAtB,+CAAO,OAAP,oBAAO,WAAuBK,GAAvB,kGAEoBS,EAASO,IAAT,iBAAuBhB,EAAvB,aAFpB,uBAEKiB,EAFL,EAEKA,KAFL,kBAGIA,EAAKM,MAHT,2H","sources":["components/pages/CastPage.jsx","services/api.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { Loader } from 'components/LoaderComponent/Loader';\nimport { getCast } from 'services/api';\nimport noImgAvailable from '../../images/no_image_available.jpg';\n// import CastComp from 'components/CastComponent/Cast';\n\nconst Cast = () => {\n  const [movieCast, setMovieCast] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        setLoading(true);\n\n        const fetchedCast = await getCast(movieId);\n\n        setMovieCast(fetchedCast);\n      } catch (error) {\n        if (error.code !== 'ERR_CANCELED') {\n          setError(error.message);\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchCast();\n  }, [movieId]);\n\n  if (!movieCast) {\n    return;\n  }\n\n  return (\n    <div>\n      {loading && <Loader />}\n\n      {error && !loading && <p>Error: {error}</p>}\n      {/* {movieCast.length > 0 && <CastComp movieCast={movieCast} />} */}\n      {/* <CastComp movieCast={movieCast} /> */}\n\n      <ul>\n        {movieCast.map(\n          ({ id, profile_path, original_name, name, character }) => (\n            <li key={id}>\n              <img\n                width=\"200px\"\n                src={\n                  profile_path ? (\n                    `https://image.tmdb.org/t/p/w500${profile_path}`\n                  ) : (\n                    <img src={noImgAvailable} alt=\"not available\" />\n                  )\n                }\n                alt={original_name}\n              />\n              <p>{name}</p>\n              <p>Character: {character}</p>\n            </li>\n          )\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\n// Base request params\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'efb2c1c3ed4f12e7da1417e145c2656a',\n    language: 'en-US',\n  },\n});\n\n// fetch functions\nexport async function fetchTrendingMovies() {\n  try {\n    const { data } = await instance.get(`/trending/movie/day`);\n    return data.results;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function searchMovie(queryString, signal) {\n  try {\n    const { data } = await instance.get(`/search/movie?query=${queryString}`, {\n      signal,\n    });\n    return data.results;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getMovieById(id) {\n  try {\n    const { data } = await instance.get(`/movie/${id}`);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getCast(id) {\n  try {\n    const { data } = await instance.get(`/movie/${id}/credits`);\n    return data.cast;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getReviews(id) {\n  try {\n    const { data } = await instance.get(`/movie/${id}/reviews`);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n"],"names":["useState","movieCast","setMovieCast","error","setError","loading","setLoading","movieId","useParams","useEffect","fetchCast","getCast","fetchedCast","code","message","map","id","profile_path","original_name","name","character","width","src","noImgAvailable","alt","instance","axios","baseURL","params","api_key","language","fetchTrendingMovies","get","data","results","searchMovie","queryString","signal","getMovieById","cast"],"sourceRoot":""}