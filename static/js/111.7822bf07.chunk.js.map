{"version":3,"file":"static/js/111.7822bf07.chunk.js","mappings":"wQAiBA,EAjBoB,SAAC,GAAsB,IAApBA,EAAmB,EAAnBA,aACrB,GAAKA,EAIL,OACE,wBACGA,EAAaC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OAChB,2BACE,0BAAI,WAASD,MACb,uBAAIC,MAFGF,EADO,KAQvB,EC8BD,EAtCgB,WACd,OAAwCG,EAAAA,EAAAA,UAAS,MAAjD,eAAOL,EAAP,KAAqBM,EAArB,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAA8BH,EAAAA,EAAAA,WAAS,GAAvC,eAAOI,EAAP,KAAgBC,EAAhB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAsBR,OApBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,oGAEjBJ,GAAW,GAFM,UAIYK,EAAAA,EAAAA,IAAWJ,GAJvB,OAIXK,EAJW,OAMjBV,EAAgBU,GANC,gDAQE,iBAAf,KAAMC,MACRT,EAAS,KAAMU,SATA,yBAYjBR,GAAW,GAZM,4EAAH,qDAgBlBI,GACD,GAAE,CAACH,KAGF,gCACGF,IAAW,SAACU,EAAA,EAAD,IAEXZ,IAAUE,IAAW,yBAAG,UAAQF,MAEjC,SAAC,EAAD,CAAaP,aAAcA,MAGhC,C,sLCxCKoB,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,WAKP,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,+GAEoBN,EAASO,IAAT,uBAFpB,uBAEKC,EAFL,EAEKA,KAFL,kBAGIA,EAAKC,SAHT,2HASA,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAA2BC,EAAaC,GAAxC,kGAEoBZ,EAASO,IAAT,8BAAoCI,GAAe,CACxEC,OAAAA,IAHC,uBAEKJ,EAFL,EAEKA,KAFL,kBAKIA,EAAKC,SALT,2HAWA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA4B/B,GAA5B,kGAEoBkB,EAASO,IAAT,iBAAuBzB,IAF3C,uBAEK0B,EAFL,EAEKA,KAFL,kBAGIA,GAHJ,2HASA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAAuBhC,GAAvB,kGAEoBkB,EAASO,IAAT,iBAAuBzB,EAAvB,aAFpB,uBAEK0B,EAFL,EAEKA,KAFL,kBAGIA,EAAKO,MAHT,2HASA,SAAepB,EAAtB,+CAAO,OAAP,oBAAO,WAA0Bb,GAA1B,kGAEoBkB,EAASO,IAAT,iBAAuBzB,EAAvB,aAFpB,uBAEK0B,EAFL,EAEKA,KAFL,kBAGIA,EAAKC,SAHT,2H","sources":["components/ReviewsComponent/Reviews.jsx","components/pages/ReviewsPage.jsx","services/api.js"],"sourcesContent":["const ReviewsComp = ({ movieReviews }) => {\n  if (!movieReviews) {\n    return;\n  }\n\n  return (\n    <ul>\n      {movieReviews.map(({ id, author, content }) => (\n        <li key={id}>\n          <h2>Author: {author}</h2>\n          <p>{content}</p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ReviewsComp;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { Loader } from 'components/LoaderComponent/Loader';\nimport { getReviews } from 'services/api';\nimport ReviewsComp from 'components/ReviewsComponent/Reviews';\n\nconst Reviews = () => {\n  const [movieReviews, setMovieReviews] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        setLoading(true);\n\n        const fetchedReviews = await getReviews(movieId);\n\n        setMovieReviews(fetchedReviews);\n      } catch (error) {\n        if (error.code !== 'ERR_CANCELED') {\n          setError(error.message);\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchReviews();\n  }, [movieId]);\n\n  return (\n    <>\n      {loading && <Loader />}\n\n      {error && !loading && <p>Error: {error}</p>}\n\n      <ReviewsComp movieReviews={movieReviews} />\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\n// Base request params\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'efb2c1c3ed4f12e7da1417e145c2656a',\n    language: 'en-US',\n  },\n});\n\n// fetch functions\nexport async function fetchTrendingMovies() {\n  try {\n    const { data } = await instance.get(`/trending/movie/day`);\n    return data.results;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function searchMovie(queryString, signal) {\n  try {\n    const { data } = await instance.get(`/search/movie?query=${queryString}`, {\n      signal,\n    });\n    return data.results;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getMovieById(id) {\n  try {\n    const { data } = await instance.get(`/movie/${id}`);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getCast(id) {\n  try {\n    const { data } = await instance.get(`/movie/${id}/credits`);\n    return data.cast;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getReviews(id) {\n  try {\n    const { data } = await instance.get(`/movie/${id}/reviews`);\n    return data.results;\n  } catch (error) {\n    throw error;\n  }\n}\n"],"names":["movieReviews","map","id","author","content","useState","setMovieReviews","error","setError","loading","setLoading","movieId","useParams","useEffect","fetchReviews","getReviews","fetchedReviews","code","message","Loader","instance","axios","baseURL","params","api_key","language","fetchTrendingMovies","get","data","results","searchMovie","queryString","signal","getMovieById","getCast","cast"],"sourceRoot":""}